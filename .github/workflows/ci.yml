name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

jobs:
  build_and_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install

      - name: Lint with flake8
        run: poetry run flake8 .

      - name: Check formatting with black
        run: poetry run black --check .

      - name: Check imports with isort
        run: poetry run isort --check-only .

  test:
    runs-on: ubuntu-latest
    needs: build_and_lint
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: nexusmind_user
          POSTGRES_PASSWORD: nexusmind_password
          POSTGRES_DB: nexusmind_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:6.2
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
    - name: Check out code
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Install dependencies
      run: poetry install

    - name: Run tests with pytest
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: nexusmind_user
        POSTGRES_PASSWORD: nexusmind_password
        POSTGRES_DB: nexusmind_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 0
        MINIO_ROOT_USER: testuser
        MINIO_ROOT_PASSWORD: testpassword
        MINIO_ENDPOINT: localhost:9000
        MINIO_BUCKET: test-bucket
        OPENAI_API_KEY: sk-testkey
        S3_BUCKET_NAME: test-bucket
        STORAGE_BASE_PATH: /tmp/storage
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
      run: poetry run pytest

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nexusmind:latest
            ${{ secrets.DOCKER_USERNAME }}/nexusmind:${{ github.sha }}

  deploy:
    name: Deploy to Production Server
    runs-on: kpl-server-deploy
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    env:
      POSTGRES_USER: ${{ secrets.PROD_POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.PROD_POSTGRES_DB }}
      POSTGRES_HOST: ${{ secrets.PROD_POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.PROD_POSTGRES_PORT }}
      REDIS_HOST: ${{ secrets.PROD_REDIS_HOST }}
      REDIS_PORT: ${{ secrets.PROD_REDIS_PORT }}
      REDIS_DB: ${{ secrets.PROD_REDIS_DB }}
      MINIO_ROOT_USER: ${{ secrets.PROD_MINIO_ROOT_USER }}
      MINIO_ROOT_PASSWORD: ${{ secrets.PROD_MINIO_ROOT_PASSWORD }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      STORAGE_BASE_PATH: ${{ secrets.STORAGE_BASE_PATH }}
      CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
      CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Deploy with Environment Variables
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          set -x
          echo "Navigating to project directory..."
          cd /home/xhz/documents/code_project/NEXUSMIND

          echo "Pulling latest changes from origin..."
          git pull origin main

          echo "Logging in to Docker Hub..."
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          
          echo "Pulling latest Docker image..."
          docker compose pull nexusmind-api

          echo "Restarting services with Docker Compose..."
          docker compose up -d --force-recreate --remove-orphans

          echo "Cleaning up unused Docker images..."
          docker image prune -a -f